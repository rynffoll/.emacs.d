#+title: Emacs config
#+property: header-args:emacs-lisp :tangle "init.el"
* Table of Contents :TOC:
- [[#early-initialization][Early Initialization]]
- [[#initialization][Initialization]]
- [[#personal-info][Personal Info]]
- [[#package-manager][Package Manager]]
- [[#auto-compile][Auto Compile]]
- [[#defaults][Defaults]]
- [[#general][General]]
- [[#evil][Evil]]
- [[#which-key][Which-key]]
- [[#keyboard-layout][Keyboard Layout]]
- [[#icons][Icons]]
- [[#mode-line][Mode Line]]
- [[#theme][Theme]]
- [[#async][Async]]
- [[#modernized-package-menu][Modernized Package Menu]]
- [[#frame][Frame]]
- [[#windows][Windows]]
- [[#buffers][Buffers]]
- [[#pop-ups][Pop-ups]]
- [[#completion][Completion]]
- [[#files][Files]]
- [[#projects][Projects]]
- [[#workspaces][Workspaces]]
- [[#dired][Dired]]
- [[#tramp][Tramp]]
- [[#shell][Shell]]
- [[#os-specific][OS-specific]]
- [[#help][Help]]
- [[#editor][Editor]]
- [[#ediff][Ediff]]
- [[#better-undo][Better Undo]]
- [[#highlighting][Highlighting]]
- [[#line-numbers][Line Numbers]]
- [[#snippets][Snippets]]
- [[#auto-completion][Auto Completion]]
- [[#search][Search]]
- [[#folding][Folding]]
- [[#spell-checking][Spell Checking]]
- [[#syntax-checking][Syntax Checking]]
- [[#goto][Goto]]
- [[#file-tree][File Tree]]
- [[#terminal][Terminal]]
- [[#lsp][LSP]]
- [[#languages][Languages]]
  - [[#emacs-lisp][Emacs Lisp]]
  - [[#clojure][Clojure]]
  - [[#java][Java]]
  - [[#go][Go]]
  - [[#makefile][Makefile]]
  - [[#js][JS]]
  - [[#web][Web]]
  - [[#plantuml][PlantUML]]
  - [[#sql][SQL]]
  - [[#groovy][Groovy]]
  - [[#markdown][Markdown]]
  - [[#json][JSON]]
  - [[#yaml][YAML]]
  - [[#lua][Lua]]
  - [[#config][Config]]
- [[#git][Git]]
- [[#org][Org]]
  - [[#common][Common]]
  - [[#faces][Faces]]
  - [[#table-of-contents][Table of Contents]]
  - [[#babel][Babel]]
- [[#email][Email]]
- [[#xwidget][Xwidget]]
- [[#tools][Tools]]
  - [[#editorconfig][EditorConfig]]
  - [[#docker][Docker]]
  - [[#kubernetes][Kubernetes]]
  - [[#ansible][Ansible]]
  - [[#http][HTTP]]
- [[#utils][Utils]]
- [[#the-end][The end]]

* Early Initialization
:PROPERTIES:
:header-args:emacs-lisp: :tangle "early-init.el"
:END:

Enable lexical scope
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; no-byte-compile: t -*-
#+end_src

Default directory
#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src

Package Manager
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

GC tweaks
#+begin_src emacs-lisp
(defun -override-gc-setup ()
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6))

(defun -restore-gc-setup ()
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1))

(-override-gc-setup)

(add-hook 'emacs-startup-hook #'-restore-gc-setup)

(add-hook 'emacs-startup-hook
          #'(lambda ()
              (message "Emacs ready (init time = %s, gc time = %s, gc count = %d)."
                       (format "%.2fs"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       (format "%.2fs" (float-time gc-elapsed))
                       gcs-done)))

(add-hook 'minibuffer-setup-hook #'-override-gc-setup)
(add-hook 'minibuffer-exit-hook #'-restore-gc-setup)
#+end_src

File handler tweaks
#+begin_src emacs-lisp
(defvar -file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          #'(lambda ()
              (setq file-name-handler-alist -file-name-handler-alist)))
#+end_src

UI
#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)

(add-to-list 'default-frame-alist '(left . 0.5))
(add-to-list 'default-frame-alist '(top . 0.5))
(add-to-list 'default-frame-alist '(width . 0.75))
(add-to-list 'default-frame-alist '(height . 0.9))
(add-to-list 'default-frame-alist '(menu-bar-lines . 0))
(add-to-list 'default-frame-alist '(tool-bar-lines . 0))
(add-to-list 'default-frame-alist '(vertical-scroll-bars))
;; (add-to-list 'default-frame-alist '(fullscreen . fullboth))
(add-to-list 'default-frame-alist '(font . "Fira Mono Medium 14"))
#+end_src

* Initialization
Enable lexical scope
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

* Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Ruslan Kamashev"
      user-login-name "rynffoll"
      user-mail-address "rynffoll@gmail.com")
#+end_src

* Package Manager
Setup package
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu"          . "https://elpa.gnu.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("melpa"        . "https://melpa.org/packages/")
        ("org"          . "https://orgmode.org/elpa/")))

(unless (bound-and-true-p package--initialized) ; To avoid warnings in 27
  (setq package-enable-at-startup nil)          ; To prevent initializing twice
  (package-initialize))
#+end_src

Setup use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-defer t)
(setq use-package-always-ensure t)
(setq use-package-hook-name-suffix nil)
(setq use-package-enable-imenu-support t)
(setq use-package-compute-statistics t)
(setq use-package-expand-minimally t)

(eval-when-compile
  (require 'use-package))

(use-package quelpa-use-package
  :demand
  :custom
  (quelpa-use-package-inhibit-loading-quelpa t "Improve startup performance"))
#+end_src

* Auto Compile
#+begin_src emacs-lisp
(use-package auto-compile
  :custom
  (auto-compile-display-buffer nil)
  (auto-compile-use-mode-line nil)
  :hook
  (emacs-lisp-mode-hook . auto-compile-on-load-mode)
  (emacs-lisp-mode-hook . auto-compile-on-save-mode))
#+end_src

* Defaults
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  ;; https://github.com/emacs-evil/evil-surround/issues/107#issuecomment-306117178
  (major-mode 'text-mode)
  (load-prefer-newer t)
  (use-dialog-box nil)
  (enable-recursive-minibuffers t)
  (indent-tabs-mode nil "Don't use tabs")
  (create-lockfiles nil "Stop creating .# files")
  (frame-resize-pixelwise t)
  (window-resize-pixelwise t)
  ;; https://github.com/justbur/emacs-which-key/issues/130#issuecomment-416299329
  (inhibit-compacting-font-caches nil)
  (scroll-step 1)
  (scroll-preserve-screen-position t)
  (scroll-margin 0)
  (scroll-conservatively 101)
  (ring-bell-function 'ignore)
  (delete-by-moving-to-trash t)
  (read-process-output-max (* 1024 1024))
  :hook
  (focus-out-hook . garbage-collect)
  :config
  (defalias 'yes-or-no-p 'y-or-n-p))

(use-package startup
  :ensure nil
  :custom
  (inhibit-startup-screen t)
  (initial-scratch-message nil))
#+end_src

Calendar
#+begin_src emacs-lisp
(use-package calendar
  :ensure nil
  :custom
  (calendar-date-style 'iso)
  (calendar-week-start-day 1))
#+end_src

* General
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer -leader-def
    :states '(normal visual insert emacs motion)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer -local-leader-def
    :states '(normal visual insert emacs motion)
    :keymaps 'override
    :prefix "SPC m"
    :non-normal-prefix "M-SPC m")
  (-leader-def
    "" '(nil :wk "leader")
    "o" '(:ignore t :wk "open")
    "O" '(:ignore t :wk "org")
    "p" '(:ignore t :wk "project")
    "P" '(:ignore t :wk "package")
    "b" '(:ignore t :wk "buffer")
    "w" '(:ignore t :wk "workspaces")
    "f" '(:ignore t :wk "file")
    "e" '(:ignore t :wk "emacs")
    "g" '(:ignore t :wk "git")
    "/" '(:ignore t :wk "search")
    "j" '(:ignore t :wk "jump")
    "h" '(:ignore t :wk "help")
    "t" '(:ignore t :wk "toggle")
    "i" '(:ignore t :wk "insert")
    "q" '(:ignore t :wk "quit"))
  (-local-leader-def
    "" '(nil :wk "local leader")))
#+end_src

* Evil
#+begin_src emacs-lisp
(use-package evil
  :demand
  :preface
  (defun -save-and-kill-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :general
  (evil-insert-state-map
   "C-k" nil)
  :custom
  (evil-want-keybinding nil)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-emacs-state-cursor 'hbar)
  (evil-mode-line-format nil)
  (evil-symbol-word-search t)
  (evil-move-beyond-eol nil)
  (evil-move-cursor-back t)
  :config
  (evil-mode t)
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "wq" '-save-and-kill-buffer))

(use-package evil-collection
  :demand
  :after evil
  :custom
  (evil-collection-setup-minibuffer nil)
  (evil-collection-company-use-tng nil)
  :config
  (evil-collection-init))

(use-package evil-commentary
  :hook
  (after-init-hook . evil-commentary-mode))

(use-package evil-magit
  :demand
  :after magit
  :custom
  (evil-magit-want-horizontal-movement t)
  (evil-magit-use-z-for-folds t))

(use-package evil-surround
  :hook
  (after-init-hook . global-evil-surround-mode))

(use-package evil-matchit
  :hook
  (after-init-hook . global-evil-matchit-mode))

(use-package evil-org
  :custom
  (evil-org-special-o/O '(item table-row))
  (evil-org-key-theme '(todo textobjects insert navigation heading))
  :hook
  (org-mode-hook . evil-org-mode))

(use-package evil-org-agenda
  :demand
  :ensure evil-org
  :after org-agenda
  :config
  (evil-org-agenda-set-keys))

(use-package evil-mc
  :hook
  (after-init-hook . global-evil-mc-mode))

(use-package evil-traces
  :hook
  (after-init-hook . evil-traces-mode)
  :config
  (evil-traces-use-diff-faces))
#+end_src

* Which-key
#+begin_src emacs-lisp
(use-package which-key
  :custom-face
  (which-key-local-map-description-face ((t :weight bold)))
  :custom
  (which-key-idle-delay 0.3)
  (which-key-sort-order #'which-key-prefix-then-key-order)
  (which-key-sort-uppercase-first nil)
  :hook
  (after-init-hook . which-key-mode))
#+end_src

* Keyboard Layout
#+begin_src emacs-lisp
(use-package char-fold
  :ensure nil
  :custom
  (char-fold-symmetric t)
  (search-default-mode #'char-fold-to-regexp))

(use-package reverse-im
  :general
  ("s-r"  'reverse-im-translate-word)
  (evil-normal-state-map "C-х" 'evil-force-normal-state)
  (evil-insert-state-map "C-х" 'evil-normal-state)
  (evil-visual-state-map "C-х" 'evil-exit-visual-state)
  :custom
  (reverse-im-char-fold t)
  (reverse-im-read-char-advice-function #'reverse-im-read-char-exclude)
  (reverse-im-input-methods '("russian-computer"))
  :hook
  (after-init-hook . reverse-im-mode))
#+end_src

* Icons
#+begin_src emacs-lisp
(use-package font-lock+
  :ensure nil
  :quelpa
  (font-lock+ :repo "emacsmirror/font-lock-plus" :fetcher github))

(use-package all-the-icons
  :if (display-graphic-p)
  :config
  (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t)))
#+end_src

* Mode Line
#+begin_src emacs-lisp
(use-package faces
  :ensure nil
  :custom-face
  (mode-line ((t :inherit mode-line :box nil :underline nil :overline nil)))
  (mode-line-inactive ((t :inherit mode-line-inactive :box nil :underline nil :overline nil))))

(use-package hide-mode-line
  :hook
  (dired-sidebar-mode-hook . hide-mode-line-mode))

(use-package minions
  :hook
  (after-init-hook . minions-mode))

(use-package doom-modeline
  :custom
  (doom-modeline-minor-modes t)
  (doom-modeline-buffer-file-name-style 'buffer-name)
  (doom-modeline-modal-icon nil)
  :hook
  (after-init-hook . doom-modeline-mode)
  :config
  (dolist (name '("*Messages*" "*Compile-Log*"))
    (when-let ((buffer (get-buffer name)))
      (with-current-buffer buffer
        (doom-modeline-set-main-modeline)))))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package heumi-theme
  :disabled
  :ensure nil
  :load-path "site-lisp/heumi-theme"
  :demand
  :config
  (load-theme 'heumi t))

(use-package solarized-theme
  ;; :disabled
  :demand
  :custom
  (solarized-distinct-doc-face t)
  (solarized-use-variable-pitch nil)
  (solarized-emphasize-indicators t)
  (solarized-scale-org-headlines nil)
  (solarized-scale-outline-headlines nil)
  (solarized-height-minus-1 1.0)
  (solarized-height-plus-1 1.0)
  (solarized-height-plus-2 1.0)
  (solarized-height-plus-3 1.0)
  (solarized-height-plus-4 1.0)
  :config
  (load-theme 'solarized-gruvbox-dark t))
#+end_src

* Async
#+begin_src emacs-lisp
(use-package async
  :hook
  (after-init-hook . async-bytecomp-package-mode)
  (dired-mode-hook . dired-async-mode))
#+end_src

* Modernized Package Menu
#+begin_src emacs-lisp
(use-package paradox
  :general
  (-leader-def
    "Pl" 'paradox-list-packages
    "PU" 'paradox-upgrade-packages)
  :custom
  (paradox-execute-asynchronously t)
  (paradox-github-token t "Don't ask github token"))
#+end_src

* Frame
#+begin_src emacs-lisp
(use-package frame
  :ensure nil
  :general
  (-leader-def
    "tm" 'toggle-frame-maximized
    "tf" 'toggle-frame-fullscreen)
  :config
  (blink-cursor-mode -1))

(use-package fringe
  :ensure nil
  :init
  (setf (cdr (assq 'continuation fringe-indicator-alist))
        ;; '(nil nil) ;; no continuation indicators
        '(nil right-curly-arrow) ;; right indicator only
        ;; '(left-curly-arrow nil) ;; left indicator only
        ;; '(left-curly-arrow right-curly-arrow) ;; default
        ))
#+end_src

* Windows
#+begin_src emacs-lisp
(use-package window
  :ensure nil
  :general
  (evil-window-map
   "m" 'maximize-window
   "M" 'minimize-window))

(use-package winner
  :ensure nil
  :general
  (evil-window-map
   "u" 'winner-undo
   "U" 'winner-redo)
  :custom
  (winner-dont-bind-my-keys t "Unbind C-right/C-left")
  :hook
  (after-init-hook . winner-mode))

(use-package winum
  :demand
  :general
  (-leader-def
    "'" 'winum-select-window-by-number
    "0" 'winum-select-window-0-or-10
    "1" 'winum-select-window-1
    "2" 'winum-select-window-2
    "3" 'winum-select-window-3
    "4" 'winum-select-window-4
    "5" 'winum-select-window-5
    "6" 'winum-select-window-6
    "7" 'winum-select-window-7
    "8" 'winum-select-window-8
    "9" 'winum-select-window-9)
  :custom
  (winum-auto-setup-mode-line nil "For spaceline")
  (winum-scope 'frame-local)
  :config
  (winum-mode))
#+end_src

* Buffers
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :preface
  (defun -switch-to-scratch () (interactive) (switch-to-buffer "*scratch*"))
  (defun -switch-to-messages () (interactive) (switch-to-buffer "*Messages*"))
  :general
  (-leader-def
    "bs" '(-switch-to-scratch :wk "open scratch")
    "bm" '(-switch-to-messages :wk "open messages")
    "bR" 'rename-buffer))

(use-package menu-bar
  :ensure nil
  :general
  (-leader-def
    "bk" 'kill-this-buffer))

(use-package window
  :ensure nil
  :general
  (-leader-def
    "bb" 'switch-to-buffer
    "bK" 'kill-buffer-and-window))

(use-package ibuffer
  :ensure nil
  :general
  ([remap list-buffers] 'ibuffer)
  (-leader-def
    "bi" 'ibuffer))

(use-package uniquify
  :ensure nil
  :defer 2
  :custom
  (uniquify-buffer-name-style 'forward))

(use-package evil-commands
  :ensure evil
  :after evil
  :general
  (-leader-def
    "bn" 'evil-buffer-new
    "b]" 'evil-next-buffer
    "b[" 'evil-prev-buffer))

(use-package ibuffer-vc
  :preface
  (defun -setup-ibuffer-vc ()
    (ibuffer-vc-set-filter-groups-by-vc-root)
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic)))
  :hook
  (ibuffer-hook . -setup-ibuffer-vc))
#+end_src

* Pop-ups
#+begin_src emacs-lisp
(use-package shackle
  :custom
  (shackle-default-alignment 'below)
  (shackle-default-size 0.3)
  (shackle-rules '((help-mode :align below :select t)
                   (helpful-mode :align below)
                   (flycheck-error-list-mode :align below)
                   (cider-repl-mode :align below)
                   (ansible-doc-module-mode :align below)
                   ("*Pack*" :align below)
                   ("\\*Async Shell Command\\*.*" :regexp t :ignore t)
                   (Man-mode :align below :select t)
                   ("\\*Man.*\\*" :regexp t :align below :select t)
                   ("*lsp-help*" :align below)
                   ("*Warnings*" :align below)
                   ("*Compile-Log*" :align below)
                   (compilation-mode :align below)
                   ("*company-documentation*" :align below)
                   ("*Go REPL*" :align below)
                   ("\\*docker-compose .*\\*" :regexp t :align below)))
  :hook
  (after-init-hook . shackle-mode))
#+end_src

* Completion
Ivy
#+begin_src emacs-lisp
(use-package ivy
  :general
  (ivy-mode-map
   "C-j" 'ivy-next-line
   "C-k" 'ivy-previous-line)
  (-leader-def
    "bb" 'ivy-switch-buffer)
  :custom
  (ivy-wrap t)
  (ivy-fixed-height-minibuffer t)
  (ivy-use-virtual-buffers t)
  (ivy-virtual-abbreviate 'full)
  (ivy-on-del-error-function nil)
  (ivy-use-selectable-prompt t)
  (ivy-re-builders-alist '((counsel-rg . ivy--regex-plus)
                           (swiper     . ivy--regex-plus)
                           (t          . ivy--regex-fuzzy)))
  :hook
  (after-init-hook . ivy-mode))

(use-package ivy-hydra)

(use-package ivy-rich
  :custom
  (ivy-rich-path-style 'abbrev)
  :hook
  (ivy-mode-hook . ivy-rich-mode))
#+end_src

Counsel
#+begin_src emacs-lisp
(use-package counsel
  :general
  ([remap describe-face]            'counsel-describe-face)
  ([remap describe-function]        'counsel-describe-function)
  ([remap describe-variable]        'counsel-describe-variable)
  ([remap execute-extended-command] 'counsel-M-x)
  ([remap find-file]                'counsel-find-file)
  ([remap find-library]             'counsel-find-library)
  ([remap imenu]                    'counsel-imenu)
  (-leader-def
    "." 'counsel-find-file

    "oL" 'counsel-find-library
    "oh" 'counsel-command-history

    "Pp" 'counsel-package

    "ff" 'counsel-find-file
    "fr" 'counsel-recentf

    "/b" 'swiper
    "/d" 'counsel-rg

    "tt" 'counsel-load-theme

    "hF" '(:ignore t :wk "face")
    "hFf" 'counsel-faces
    "hFe" 'counsel-colors-emacs
    "hFw" 'counsel-colors-web)
  :custom
  (counsel-describe-function-function 'helpful-callable)
  (counsel-describe-variable-function 'helpful-variable))

(use-package counsel-projectile
  :general
  (-leader-def
    "/p" 'counsel-projectile-rg)
  :hook
  (after-init-hook . counsel-projectile-mode))
#+end_src

M-x interface
#+begin_src emacs-lisp
(use-package amx
  :custom
  (amx-backend 'ivy))
#+end_src

* Files
#+begin_src emacs-lisp
(use-package files
  :ensure nil
  :custom
  (require-final-newline t)
  (make-backup-files nil "Stop creating backup~ files")
  (auto-save-default nil "Stop creating #autosave# files")
  (enable-local-variables :all)
  (enable-local-eval t))

(use-package autorevert
  :ensure nil
  :custom
  (auto-revert-verbose nil)
  (global-auto-revert-non-file-buffers t)
  (auto-revert-check-vc-info t)
  :hook
  (after-init-hook . global-auto-revert-mode))

(use-package savehist
  :ensure nil
  :hook
  (after-init-hook . savehist-mode))

(use-package saveplace
  :ensure nil
  :hook
  (after-init-hook . save-place-mode))

(use-package recentf
  :ensure nil
  :custom
  (recentf-max-saved-items 300)
  :hook
  (after-init-hook . recentf-mode))
#+end_src

Quick access to init files
#+begin_src emacs-lisp
(use-package iqa
  :general
  (-leader-def
    "ed" 'iqa-find-user-init-directory
    "ee" 'iqa-find-user-init-file
    "er" 'iqa-reload-user-init-file)
  :custom
  (iqa-user-init-file (concat user-emacs-directory "config.org")))
#+end_src

Customize
#+begin_src emacs-lisp
(use-package cus-edit
  :ensure nil
  :general
  (-leader-def
    "oc" 'customize-group)
  :custom
  (custom-file null-device "Don't store customizations"))
#+end_src

Encryption
#+begin_src emacs-lisp
(use-package epa
  :ensure nil
  :custom
  (epa-pinentry-mode 'loopback))
#+end_src

* Projects
#+begin_src emacs-lisp
(use-package projectile
  :general
  (-leader-def
    "p" '(:keymap projectile-command-map :package projectile :wk "project"))
  :custom
  (projectile-enable-caching t)
  (projectile-completion-system 'ivy)
  :hook
  (after-init-hook . projectile-mode))
#+end_src

* Workspaces
#+begin_src emacs-lisp
(use-package eyebrowse
  :commands
  eyebrowse-create-window-config
  :preface
  (defun -eyebrowse-create-window-config-with-tag ()
    (interactive)
    (let ((tag (read-string "Tag: ")))
      (eyebrowse-create-window-config)
      (eyebrowse-rename-window-config (eyebrowse--get 'current-slot) tag)))
  (defun -eyebrowse-create-projectile-window-config ()
    (interactive)
    (eyebrowse-create-window-config)
    (let* ((inhibit-quit t)
           (project-name (with-local-quit (projectile-switch-project))))
      (if (> (length project-name) 0)
          (eyebrowse-rename-window-config
           (eyebrowse--get 'current-slot)
           (file-name-nondirectory (directory-file-name project-name)))
        (progn
          (eyebrowse-close-window-config)
          (setq quit-flag nil)))))
  (defun -eyebrowse-close-other-window-configs ()
    (interactive)
    (when (or (not eyebrowse-close-window-config-prompt)
              (yes-or-no-p "Close other window configs?"))
      (mapcar #'eyebrowse--delete-window-config
              (remove (eyebrowse--get 'current-slot)
                      (mapcar #'car (eyebrowse--get 'window-configs))))))
  :general
  (-leader-def
    "wc" 'eyebrowse-close-window-config
    "w TAB" 'eyebrowse-last-window-config
    "wR" 'eyebrowse-rename-window-config
    "ww" 'eyebrowse-switch-to-window-config
    "w0" 'eyebrowse-switch-to-window-config-0
    "w1" 'eyebrowse-switch-to-window-config-1
    "w2" 'eyebrowse-switch-to-window-config-2
    "w3" 'eyebrowse-switch-to-window-config-3
    "w4" 'eyebrowse-switch-to-window-config-4
    "w5" 'eyebrowse-switch-to-window-config-5
    "w6" 'eyebrowse-switch-to-window-config-6
    "w7" 'eyebrowse-switch-to-window-config-7
    "w8" 'eyebrowse-switch-to-window-config-8
    "w9" 'eyebrowse-switch-to-window-config-9
    "w[" 'eyebrowse-prev-window-config
    "w]" 'eyebrowse-next-window-config
    "wn" '-eyebrowse-create-window-config-with-tag
    "wp" '-eyebrowse-create-projectile-window-config
    "wC" '-eyebrowse-close-other-window-configs)
  :custom
  (eyebrowse-new-workspace t "Clean up and display the scratch buffer")
  (eyebrowse-wrap-around t)
  (eyebrowse-close-window-config-prompt t)
  :hook
  (after-init-hook . eyebrowse-mode))
#+end_src

* Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-listing-switches "-lah --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-recursive-copies 'always "Never prompt for recursive copies of a directory")
  (dired-recursive-deletes 'always "Never prompt for recursive deletes of a directory")
  (dired-hide-details-hide-symlink-targets nil)
  :hook
  (dired-mode-hook . dired-hide-details-mode))

(use-package dired-hide-dotfiles
  :general
  (:keymaps 'dired-mode-map :states 'normal
            "M-." 'dired-hide-dotfiles-mode))

(use-package dired-subtree
  :preface
  (defun -dired-subtree-revert ()
    (call-interactively 'revert-buffer)
    (recenter))
  :general
  (:keymaps 'dired-mode-map :states 'normal
            "TAB" 'dired-subtree-toggle)
  :custom
  (dired-subtree-use-backgrounds nil)
  :config
  ;; for treemacs-icons-dired
  (advice-add #'dired-subtree-toggle :after #'-dired-subtree-revert))

(use-package pack
  :general
  (:keymaps 'dired-mode-map :states 'normal
            "P" 'pack-dired-dwim)
  :custom
  (pack-dired-default-extension ".zip"))

(use-package dired-git-info
  :general
  (:keymaps 'dired-mode-map :states 'normal
            ")" 'dired-git-info-mode)
  :custom
  (dgi-auto-hide-details-p nil))
#+end_src

* Tramp
#+begin_src emacs-lisp
(use-package tramp
  :ensure nil
  :custom
  (tramp-default-method "ssh")
  (tramp-default-proxies-alist nil))
#+end_src

* Shell
~$PATH~ from user's shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :demand
  :custom
  (exec-path-from-shell-arguments '("-l") "remove -i")
  :config
  (exec-path-from-shell-initialize))
#+end_src

Use the Emacsclient as the ~$EDITOR~ of child processes
#+begin_src emacs-lisp
(use-package with-editor
  :general
  ([remap shell-command]       'with-editor-shell-command)
  ([remap async-shell-command] 'with-editor-async-shell-command)
  :hook
  (shell-mode-hook   . with-editor-export-editor)
  (term-exec-hook    . with-editor-export-editor)
  (eshell-mode-hook  . with-editor-export-editor))
#+end_src

* OS-specific
MacOS tweaks
#+begin_src emacs-lisp
(use-package files
  :if (eq system-type 'darwin)
  :ensure nil
  :custom
  (insert-directory-program "gls")
  (trash-directory "~/.Trash/emacs"))
#+end_src

[[https://adam.kruszewski.name/2017/09/emacs-in-wsl-and-opening-links/][WSL tweaks]]
#+begin_src emacs-lisp
(use-package browse-url
  :disabled
  :if (file-exists-p "/mnt/c/Windows/System32/cmd.exe")
  :ensure nil
  :custom
  (browse-url-generic-program "/mnt/c/Windows/System32/cmd.exe")
  (browse-url-generic-args '("/c" "start"))
  (browse-url-browser-function 'browse-url-generic))
#+end_src

* Help
#+begin_src emacs-lisp
(use-package help
  :ensure nil
  :general
  (-leader-def
    "hd" 'describe-mode))

(use-package help-fns
  :ensure nil
  :general
  (-leader-def
    "hf" 'describe-function
    "hv" 'describe-variable))

(use-package man
  :ensure nil
  :general
  (-leader-def
    "hM" 'man))

(use-package helpful
  :general
  (-leader-def
    "h." 'helpful-at-point
    "hC" 'helpful-command
    "hc" 'helpful-callable
    "hk" 'helpful-key
    "hm" 'helpful-macro))
#+end_src

* Editor
#+begin_src emacs-lisp
(use-package delsel
  :ensure nil
  :general
  ("C-c C-g" 'minibuffer-keyboard-quit)
  :hook
  (after-init-hook . delete-selection-mode))

(use-package simple
  :ensure nil
  :general
  (-leader-def
    "SPC" 'execute-extended-command
    ":" 'eval-expression
    "tT" 'toggle-truncate-lines)
  :custom
  (backward-delete-char-untabify-method 'hungry)
  (async-shell-command-buffer 'new-buffer)
  :hook
  (after-init-hook . column-number-mode))

(use-package prog-mode
  :ensure nil
  :hook
  (after-init-hook . global-prettify-symbols-mode))

(use-package so-long
  :ensure nil
  :hook
  (after-init-hook . global-so-long-mode))

(use-package hungry-delete
  :hook
  (after-init-hook . global-hungry-delete-mode))
#+end_src

* Ediff
#+begin_src emacs-lisp
(use-package ediff
  :ensure nil
  :custom
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally)
  :hook
  (ediff-prepare-buffer-hook . show-all)
  (ediff-quit-hook . winner-undo))
#+end_src

* Better Undo
#+begin_src emacs-lisp
(use-package undo-tree
  :custom
  (undo-tree-auto-save-history t)
  (undo-tree-enable-undo-in-region nil)
  (undo-tree-history-directory-alist `(("." . ,temporary-file-directory))))
#+end_src

* Highlighting
Highlight compilation
#+begin_src emacs-lisp
(use-package ansi-color
  :preface
  ;; http://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html
  (defun endless/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))
  :hook
  (compilation-filter-hook . endless/colorize-compilation))
#+end_src

Highlight current line
#+begin_src emacs-lisp
(use-package hl-line
  :ensure nil
  :preface
  (defun -disable-global-hl-line-mode ()
    (setq-local global-hl-line-mode nil))
  :general
  (-leader-def
    "tl" 'global-hl-line-mode)
  :hook
  (after-init-hook . global-hl-line-mode))
#+end_src

Visual feedback
#+begin_src emacs-lisp
(use-package volatile-highlights
  :after undo-tree
  :hook
  (after-init-hook . volatile-highlights-mode)
  :config
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree))
#+end_src

Parentheses
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook
  (after-init-hook . show-paren-mode))

(use-package elec-pair
  :ensure nil
  :hook
  (after-init-hook . electric-pair-mode))

(use-package rainbow-delimiters
  :hook
  (prog-mode-hook . rainbow-delimiters-mode)
  (cider-repl-mode-hook . rainbow-delimiters-mode))
#+end_src

Colorize color names
#+begin_src emacs-lisp
(use-package rainbow-mode
  :general
  (-leader-def
    "tr" 'rainbow-mode)
  :hook
  (css-mode-hook . rainbow-mode))
#+end_src

Highlight special symbols
#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :general
  (-leader-def
    "tw" 'whitespace-mode))

(use-package page-break-lines
  :hook
  (after-init-hook . global-page-break-lines-mode))

(use-package highlight-indent-guides
  :general
  (-leader-def
    "ti" 'highlight-indent-guides-mode))
#+end_src

Highlight symbols
#+begin_src emacs-lisp
(use-package hl-todo
  :custom
  (hl-todo-highlight-punctuation ":")
  :hook
  (after-init-hook . global-hl-todo-mode))

(use-package hi-lock
  :ensure nil
  :general
  (-leader-def
    "th" '(:ignore t :wh "highlight")
    "th." 'highlight-symbol-at-point
    "thp" 'highlight-phrase
    "thr" 'highlight-regexp
    "thl" 'highlight-lines-matching-regexp
    "thu" 'unhighlight-regexp))
#+end_src

Highlight identifiers
#+begin_src emacs-lisp
(use-package color-identifiers-mode
  :general
  (-leader-def
    "tc" 'color-identifiers-mode))
#+end_src

* Line Numbers
#+begin_src emacs-lisp
(use-package display-line-numbers
  :ensure nil
  :general
  (-leader-def
    "tn" 'display-line-numbers-mode)
  :custom
  (display-line-numbers-width-start t))
#+end_src

* Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :hook
  (text-mode-hook . yas-minor-mode-on)
  (prog-mode-hook . yas-minor-mode-on))

(use-package yasnippet-snippets)

(use-package ivy-yasnippet
  :general
  (-leader-def
    "is" 'ivy-yasnippet))
#+end_src

* Auto Completion
#+begin_src emacs-lisp
(use-package company
  :general
  ("M-S-SPC" 'company-complete)
  :custom
  (company-minimum-prefix-length 2)
  (company-require-match 'never)
  (company-selection-wrap-around t)
  (company-tooltip-minimum-width 30)
  (company-tooltip-align-annotations t)
  (company-dabbrev-ignore-case nil)
  (company-dabbrev-downcase nil)
  :hook
  (after-init-hook . global-company-mode))

(use-package company-shell
  :after company
  :init
  (add-to-list 'company-backends 'company-shell))

(use-package company-statistics
  :after company
  :config
  (company-statistics-mode))
#+end_src

* Search
#+begin_src emacs-lisp
(use-package anzu
  :custom
  (anzu-cons-mode-line-p nil)
  :hook
  (after-init-hook . global-anzu-mode))

(use-package evil-anzu
  :after anzu)
#+end_src

* Folding
#+begin_src emacs-lisp
(use-package hideshow
  :ensure nil
  :hook
  (prog-mode-hook . hs-minor-mode))
#+end_src

* Spell Checking
#+begin_src emacs-lisp
(use-package ispell
  :if (executable-find "hunspell")
  :ensure nil
  :init
  ;; ignore $LANG for choosing dictionary
  ;; (setenv "DICTIONARY" "ru_RU,en_US")
  (setenv "LANG" "en_US.UTF-8")
  :custom
  (ispell-really-aspell nil)
  (ispell-really-hunspell t)
  (ispell-dictionary "ru_RU,en_US")
  :config
  (setq ispell-program-name "hunspell")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "ru_RU,en_US"))

(use-package flyspell
  :general
  (-leader-def
    "ts" 'flyspell-mode)
  (flyspell-mode-map
   "C-," nil
   "C-." nil
   "C-c $" nil)
  :custom
  (flyspell-delay 1)
  (flyspell-use-meta-tab nil)
  (flyspell-issue-message-flag nil)
  (flyspell-prog-text-faces '(;; font-lock-string-face
                              font-lock-comment-face
                              font-lock-doc-face))
  :hook
  ;; (text-mode-hook . flyspell-mode)
  ;; (org-mode-hook . flyspell-mode)
  ;; (prog-mode-hook . flyspell-prog-mode)
  (git-commit-mode-hook . flyspell-mode))

(use-package flyspell-correct
  :general
  (flyspell-mode-map
   "C-;" 'flyspell-correct-at-point))

(use-package flyspell-correct-ivy
  :after flyspell-correct
  :custom
  (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

* Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :custom-face
  (fringe ((t :background nil)))
  :custom
  (flycheck-indication-mode 'right-fringe)
  :hook
  (prog-mode-hook . flycheck-mode))

(use-package fringe-helper
  :demand
  :after flycheck
  :config
  (fringe-helper-define 'flycheck-fringe-bitmap-double-arrow 'center
    ".....X.."
    "....XX.."
    "...XXX.."
    "..XXXX.."
    "...XXX.."
    "....XX.."
    ".....X.."))

(use-package flycheck-inline
  :custom-face
  (flycheck-inline-error ((t :inherit compilation-error :box t :height 0.9)))
  (flycheck-inline-info ((t :inherit compilation-info :box t :height 0.9)))
  (flycheck-inline-warning ((t :inherit compilation-warning :box t :height 0.9)))
  :hook
  (flycheck-mode-hook . flycheck-inline-mode))
#+end_src

* Goto
Imenu
#+begin_src emacs-lisp
(use-package imenu
  :ensure nil
  :general
  (-leader-def
    "ji" 'imenu))
#+end_src

Avy
#+begin_src emacs-lisp
(use-package avy
  :general
  (-leader-def
    "jc" 'avy-goto-char
    "jw" 'avy-goto-word-0
    "jW" 'avy-goto-word-1
    "jl" 'avy-goto-line
    "jL" 'avy-goto-end-of-line)
  :custom
  (avy-background t))

(use-package ace-window
  :general
  (evil-window-map
   "." 'ace-window)
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-scope 'frame))

(use-package link-hint
  :general
  (-leader-def
    "ol" 'link-hint-open-link))
#+end_src

Jump to definition
#+begin_src emacs-lisp
(use-package dumb-jump
  :preface
  (defhydra hydra-dumb-jump
    (:color blue :columns 3)
    ("j" dumb-jump-go "go")
    ("o" dumb-jump-go-other-window "other window")
    ("e" dumb-jump-go-prefer-external "go external")
    ("x" dumb-jump-go-prefer-external-other-window "go external other window")
    ("i" dumb-jump-go-prompt "prompt")
    ("l" dumb-jump-quick-look "quick look")
    ("b" dumb-jump-back "back"))
  :general
  (-leader-def
    "jj" '(hydra-dumb-jump/body :wk "hydra-dumb-jump"))
  :custom
  (dumb-jump-selector 'ivy)
  (dumb-jump-prefer-searcher 'rg))
#+end_src

* File Tree
#+begin_src emacs-lisp
(use-package treemacs
  :preface
  (defun -hide-fringes ()
    (when (display-graphic-p)
      (set-window-fringes nil 0 0)))
  :general
  (-leader-def
    "0" 'treemacs-select-window
    "ft" 'treemacs)
  :custom-face
  (treemacs-root-face ((t :inherit font-lock-constant-face :bold t :height 1.1)))
  :custom
  (treemacs-collapse-dirs (if (executable-find "python") 3 0))
  (treemacs-follow-after-init t)
  (treemacs-show-cursor t)
  (treemacs-no-png-images nil)
  (treemacs-no-delete-other-windows nil)
  (treemacs-space-between-root-nodes nil)
  (treemacs-width 35)
  (treemacs-recenter-after-file-follow 'on-distance)
  (treemacs-recenter-after-tag-follow 'on-distance)
  :hook
  (treemacs-mode-hook . hide-mode-line-mode)
  (treemacs-mode-hook . -hide-fringes)
  :config
  (treemacs-create-theme "Icons"
    :config
    (progn
      (treemacs-create-icon
       :icon (concat (all-the-icons-octicon "repo" :v-adjust -0.1 :height 1.2) " ")
       :extensions (root))

      (treemacs-create-icon
       :icon (concat  (all-the-icons-octicon "file-directory" :v-adjust 0) " ")
       :extensions (dir-open))
      (treemacs-create-icon
       :icon (concat (all-the-icons-octicon "file-directory" :v-adjust 0) " ")
       :extensions (dir-closed))

      (treemacs-create-icon
       :icon (concat "  " (all-the-icons-octicon "tag" :v-adjust 0) " ")
       :extensions (tag-leaf))
      (treemacs-create-icon
       :icon (concat
              (all-the-icons-octicon "chevron-down" :v-adjust 0)
              " "
              (all-the-icons-octicon "tag" :v-adjust 0)
              " ")
       :extensions (tag-open))
      (treemacs-create-icon
       :icon (concat
              (all-the-icons-octicon "chevron-right" :v-adjust 0)
              " "
              (all-the-icons-octicon "tag" :v-adjust 0)
              " ")
       :extensions (tag-closed))

      (treemacs-create-icon
       :icon (concat (all-the-icons-octicon "file-code" :v-adjust 0) " ")
       :extensions (fallback))))

  (treemacs-load-theme "Icons"))

(use-package treemacs-evil
  :after treemacs)

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :hook
  (dired-mode-hook . treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+end_src

* Terminal
Eshell
#+begin_src emacs-lisp
(use-package em-smart
  :ensure nil
  :after eshell
  :config
  (eshell-smart-initialize))

(use-package eshell-fringe-status
  :hook
  (eshell-mode-hook . eshell-fringe-status-mode))

(use-package eshell-prompt-extras
  :after eshell
  :commands epe-theme-lambda
  :custom
  (eshell-highlight-prompt nil)
  (eshell-prompt-function 'epe-theme-lambda))
#+end_src

Emacs libvterm integration
#+begin_src emacs-lisp
(use-package vterm
  :custom
  (vterm-kill-buffer-on-exit t)
  (vterm-max-scrollback 10000)
  :hook
  (vterm-mode-hook . -disable-global-hl-line-mode))
#+end_src

Quick access to shell
#+begin_src emacs-lisp
(use-package eshell-toggle
  :preface
  (defun eshell-toggle-init-vterm (dir)
    (let ((default-directory dir))
      (vterm)))
  :general
  ("s-t" 'eshell-toggle)
  :custom
  (eshell-toggle-init-function 'eshell-toggle-init-vterm)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil))
#+end_src

* LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-keep-workspace-alive nil)
  (lsp-prefer-capf t)
  (lsp-keymap-prefix "C-c l")
  :hook
  (lsp-mode-hook . lsp-enable-which-key-integration))

(use-package lsp-ui
  :after lsp-mode
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-sideline-enable nil))

(use-package lsp-ivy
  :after lsp-mode
  :general
  (lsp-command-map
   "i" 'lsp-ivy-workspace-symbol
   "I" 'lsp-ivy-global-workspace-symbol))

(use-package dap-mode
  :after lsp-mode
  :general
  (lsp-command-map
   "D" 'dap-hydra)
  :config
  (dap-mode 1)
  (dap-ui-mode 1))
#+end_src

* Languages
** Emacs Lisp
#+begin_src emacs-lisp
(use-package highlight-defined
  :custom
  (highlight-defined-face-use-itself t)
  :hook
  (emacs-lisp-mode-hook . highlight-defined-mode))

(use-package highlight-quoted
  :hook
  (emacs-lisp-mode-hook . highlight-quoted-mode))

(use-package erefactor
  :general
  (-local-leader-def :keymaps 'emacs-lisp-mode-map
    "R" '(:keymap erefactor-map :wk "refactor")))

(use-package eros
  :hook
  (emacs-lisp-mode-hook . eros-mode))
#+end_src

** Clojure
#+begin_src emacs-lisp
(use-package clojure-mode
  :config
  (require 'flycheck-clj-kondo))

(use-package clojure-mode-extra-font-locking)
(use-package clojure-snippets)

(use-package cider
  :general
  (-local-leader-def :keymaps 'clojure-mode-map
    "c" '(:ignore t :wk "connect")
    "cc" '(cider-jack-in :wk "jack-in")
    "cj" '(cider-jack-in-clj :wk "jack-in-clj")
    "cs" '(cider-jack-in-cljs :wk "jack-in-cljs")
    "cC" '(cider-connect :wk "connect")
    "cR" '(cider-restart :wk "restart")
    "cQ" '(cider-quit :wk "quit")

    "b" '(:ignore t :wk "buffer")
    "bs" 'cider-scratch

    "=" '(cider-format-buffer :wk "format"))
  :custom
  (cider-repl-history-display-style 'one-line)
  (cider-repl-history-highlight-current-entry t)
  (cider-repl-history-highlight-inserted-item t)
  (nrepl-use-ssh-fallback-for-remote-hosts t)
  :hook
  (cider-repl-mode-hook . subword-mode)
  (cider-mode-hook . cider-company-enable-fuzzy-completion)
  (cider-repl-mode-hook . cider-company-enable-fuzzy-completion))

(use-package cider-hydra
  :general
  (-local-leader-def :keymaps 'clojure-mode-map
    "d" '(cider-hydra-doc/body :wk "doc")
    "e" '(cider-hydra-eval/body :wk "eval")
    "t" '(cider-hydra-test/body :wk "test")
    "r" '(cider-hydra-repl/body :wk "repl"))
  :hook
  (clojure-mode-hook . cider-hydra-mode))

(use-package clj-refactor
  :pin melpa-stable
  :general
  (-local-leader-def :keymaps 'clojure-mode-map
    "R" '(hydra-cljr-help-menu/body :wk "refactor"))
  :hook
  (clojure-mode-hook . clj-refactor-mode))

(use-package eldoc
  :ensure nil
  :hook
  (clojure-mode-hook . eldoc-mode)
  (cider-repl-mode-hook . eldoc-mode))

(use-package flycheck-clj-kondo)
#+end_src

** Java
#+begin_src emacs-lisp
(use-package lsp-java
  :after cc-mode
  :hook
  (java-mode-hook . lsp-deferred))

(use-package lsp-java-boot
  :ensure lsp-java
  :hook
  (lsp-mode-hook . lsp-lens-mode)
  (java-mode-hook . lsp-java-boot-lens-mode))

(use-package dap-java
  :ensure nil
  :after lsp-java)
#+end_src

** Go
Install [[https://github.com/golang/tools/tree/master/gopls][gopls]]
#+begin_src sh :tangle no
GO111MODULE=on go get golang.org/x/tools/gopls@latest
#+end_src

#+begin_src emacs-lisp
(use-package go-mode
  :preface
  (defun -setup-go-mode ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  :hook
  (go-mode-hook . lsp-deferred)
  (go-mode-hook . -setup-go-mode))
#+end_src

** Makefile
#+begin_src emacs-lisp
(use-package makefile-executor
  :general
  (-local-leader-def :keymaps 'makefile-mode-map
    "e" '(:ignore t :wk "eval")
    "ee" '(makefile-executor-execute-target :wk "execute")
    "eb" '(makefile-executor-execute-target :wk "execute in dedicated buffer")
    "el" '(makefile-executor-execute-target :wk "execute last"))
  :hook
  (makefile-mode-hook . makefile-executor-mode))
#+end_src

** JS
#+begin_src emacs-lisp
(use-package js-mode
  :ensure nil
  :hook
  (js-mode-hook . lsp-deferred))
#+end_src

** Web
#+begin_src emacs-lisp
(use-package web-mode
  :mode "\\.html?\\'"
  :custom
  (web-mode-enable-block-face t)
  (web-mode-enable-part-face t)
  (web-mode-enable-comment-interpolation t)
  (web-mode-enable-current-element-highlight t))
#+end_src

** PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :general
  (-local-leader-def :keymaps 'plantuml-mode-map
    "p" '(plantuml-preview :wk "preview"))
  :custom
  (plantuml-output-type (if (display-images-p) "png" "txt"))
  (plantuml-default-exec-mode 'jar)
  (plantuml-jar-path
   (car (last (file-expand-wildcards
               "/usr/local/Cellar/plantuml/*/libexec/plantuml.jar")))))

(use-package flycheck-plantuml
  :hook
  (plantuml-mode-hook . flycheck-plantuml-setup))

(use-package ob-plantuml
  :ensure org-plus-contrib
  :after org
  :custom
  (org-plantuml-jar-path plantuml-jar-path))
#+end_src

** SQL
#+begin_src emacs-lisp
(use-package sql
  :ensure nil
  :general
  (-local-leader-def :keymaps 'sql-mode-map
    "c" '(:ignore t :wk "connect")
    "cc" '(sql-connect :wk "connect")

    "e" '(:ignore t :wk "eval")
    "ee" '(sql-send-paragraph :wk "paragraph")
    "el" '(sql-send-line-and-next :wk "line and next")
    "eb" '(sql-send-buffer :wk "buffer")
    "er" '(sql-send-region :wk "region")
    "es" '(sql-send-string :wk "string")

    "l" '(:ignore t :wk "list")
    "la" '(sql-list-all :wk "all")
    "lt" '(sql-list-table :wk "table"))
  :custom
  (sql-connection-alist '((pg-local
                           (sql-product 'postgres)
                           (sql-port 5432)
                           (sql-server "localhost")
                           (sql-user "postgres")
                           (sql-password "postgres")
                           (sql-database "postgres")))))
#+end_src

** Groovy
#+begin_src emacs-lisp
(use-package groovy-mode)
#+end_src

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :general
  (-local-leader-def :keymaps 'markdown-mode-map
    "p" 'markdown-preview)
  :custom
  (markdown-command "pandoc")
  (markdown-fontify-code-blocks-natively t)
  :config
  (add-to-list 'markdown-code-lang-modes '("clj" . clojure-mode)))

(use-package grip-mode
  :general
  (-local-leader-def :keymaps 'markdown-mode-map
    "g" 'grip-mode))
#+end_src

** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :preface
  (defun -setup-json-mode ()
    (setq flycheck-checker 'json-jq
          js-indent-level 2))
  :general
  (-local-leader-def :keymaps 'json-mode-map
    "=" '(json-pretty-print-buffer :wk "format"))
  :hook
  (json-mode-hook . -setup-json-mode))
#+end_src

** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "Procfile\\'"
  :hook
  (yaml-mode-hook . flycheck-mode))

(use-package flycheck-yamllint
  :hook
  (yaml-mode-hook . flycheck-yamllint-setup))
#+end_src

** Lua
#+begin_src emacs-lisp
(use-package lua-mode
  :custom
  (lua-indent-level 2))
#+end_src

** Config
Vimrc
#+begin_src emacs-lisp
(use-package vimrc-mode)
#+end_src

SSH
#+begin_src emacs-lisp
(use-package ssh-config-mode
  :init
  (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src

* Git
Magit
#+begin_src emacs-lisp
(use-package magit
  :commands magit-blame
  :preface
  (defun -magit-status ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively #'magit-status)))
  :general
  (-leader-def
    "g." 'magit-dispatch
    "gI" 'magit-init
    "gb" 'magit-blame
    "gc" 'magit-clone
    "gg" 'magit-status
    "gl" '-magit-status
    "gL" 'magit-log-buffer-file)
  :custom
  (magit-completing-read-function 'ivy-completing-read)
  (magit-clone-default-directory "~/Projects")
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (magit-repository-directories `((,user-emacs-directory . 0)
                                  (,magit-clone-default-directory . 1))))

(use-package magit-todos
  :custom
  (magit-todos-keyword-suffix (rx (optional "(" (1+ (not (any ")"))) ")" ":")))
  :hook
  (magit-mode-hook . magit-todos-mode))
#+end_src

Git stuff
#+begin_src emacs-lisp
(use-package git-timemachine
  :general
  (-leader-def
    "gt" 'git-timemachine))

(use-package gitignore-templates
  :general
  (-leader-def
    "gi" 'gitignore-templates-new-file)
  (-local-leader-def :keymaps 'gitignore-mode-map
    "i" 'gitignore-templates-insert))

(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+end_src

Highlight diff
#+begin_src emacs-lisp
(use-package diff-hl
  :custom
  (diff-hl-draw-borders nil)
  :hook
  (after-init-hook . global-diff-hl-mode)
  (diff-hl-mode-hook . diff-hl-flydiff-mode)
  (dired-mode-hook . diff-hl-dired-mode)
  (magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
  (magit-post-refresh-hook . diff-hl-magit-post-refresh))
#+end_src

* Org
** Common
#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :preface
  (defun -open-org-directory () (interactive) (find-file org-directory))
  (defun -open-org-inbox-file () (interactive) (find-file -org-inbox-file))
  (defun -open-org-todo-file () (interactive) (find-file -org-todo-file))
  (defun -open-org-notes-file () (interactive) (find-file -org-notes-file))
  :general
  (-leader-def
    "Oa" '(org-agenda :wk "agenda")
    "O." '(-open-org-directory :wk "open org-directory")
    "Oi" '(-open-org-inbox-file :wk "open inbox")
    "Ot" '(-open-org-todo-file :wk "open todo")
    "On" '(-open-org-notes-file :wk "open notes"))
  :custom
  (org-insert-heading-respect-content t "Insert new headings after current subtree rather than inside it")

  (org-startup-indented t)
  (org-tags-column 0)
  ;; (org-ellipsis "  ") ; conflict with diff-hl
  (org-ellipsis "…")
  (org-pretty-entities t)
  (org-use-sub-superscripts '{} "Require {} for sub/super scripts")
  (org-return-follows-link t)

  (org-list-allow-alphabetical t)
  (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))

  (org-startup-with-inline-images t)

  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)
  (org-edit-src-content-indentation 0)
  (org-catch-invisible-edits 'smart)

  (org-hide-leading-stars t)
  (org-hide-leading-stars-before-indent-mode t)

  (org-fontify-done-headline nil)
  (org-fontify-quote-and-verse-blocks t)
  (org-fontify-whole-heading-line t)

  (org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!/@)" "CANCELED(c@/!)")))
  (org-priority-faces '((?A . (:inherit error :weight bold))
                        (?B . (:inherit warning :weight bold))
                        (?C . (:inherit success :weight bold))))
  (org-log-into-drawer t)

  (org-directory "~/Org")
  (-org-inbox-file (concat org-directory "/inbox.org"))
  (-org-todo-file (concat org-directory "/todo.org"))
  (-org-notes-file (concat org-directory "/notes.org"))
  (org-agenda-files `(,-org-inbox-file ,-org-todo-file))
  (org-archive-location (concat org-directory "/old/archive.org" "::* From %s")))
#+end_src

** Faces
#+begin_src emacs-lisp
(use-package org-face
  :ensure org-plus-contrib
  :custom-face
  (org-tag ((t :inherit shadow)))
  (org-ellipsis ((t :underline nil)))
  (org-block-begin-line ((t :underline nil)))
  (org-block-end-line ((t :overline nil)))
  (org-level-1 ((t :weight bold)))
  (org-level-2 ((t :weight bold)))
  (org-level-3 ((t :weight bold)))
  (org-level-4 ((t :weight bold)))
  (org-level-5 ((t :weight bold)))
  (org-level-6 ((t :weight bold)))
  (org-level-7 ((t :weight bold)))
  (org-level-8 ((t :weight bold))))
#+end_src

Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :custom
  (org-bullets-bullet-list '("•"))
  (org-bullets--keywords
   `(("^\\*+ "
      (0 (let* ((level (- (match-end 0) (match-beginning 0) 1)))
           (compose-region (- (match-end 0) 2)
                           (- (match-end 0) 1)
                           (org-bullets-level-char level))
           (dolist (n (number-sequence
                       (match-beginning 0)
                       (- (match-end 0) 3)))
             (compose-region n (+ n 1) " "))
           (put-text-property (match-beginning 0)
                              (- (match-end 0) 2)
                              'face (list :inherit 'org-hide))
           nil)))))
  :hook
  (org-mode-hook . org-bullets-mode))
#+end_src

** Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :hook
  (org-mode-hook . toc-org-enable))
#+end_src

** Babel
#+begin_src emacs-lisp
(use-package ob-core
  :ensure org-plus-contrib
  :hook
  (org-babel-after-execute-hook . org-redisplay-inline-images)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (restclient . t)
     (plantuml . t))))

(use-package ob-async
  :demand
  :after ob-core)

(use-package ob-shell
  :ensure org-plus-contrib
  :custom
  (org-babel-default-header-args:sh '((:results . "verbatim silent")
                                      (:async   . nil))))
#+end_src

* Email
Configure =~/.authinfo.gpg= ([[https://myaccount.google.com/apppasswords][App passwords]])
#+begin_src emacs-lisp :tangle no
machine imap.gmail.com login rynffoll port imaps password <PASSWORD>
machine smtp.gmail.com login rynffoll port 587 password <PASSWORD>
#+end_src

Create =~/Maildir=
#+begin_src sh :tangle no
mkdir -p ~/Maildir
#+end_src

Download messages
#+begin_src sh :tangle no
mbsync -aV
#+end_src

Initialize ~mu~ database
#+begin_src sh :tangle no
mu init --maildir=~/Maildir --my-address=rynffoll@gmail.com
#+end_src

Index Maildir
#+begin_src sh :tangle no
mu index
#+end_src

Mu4e
#+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"
  :general
  (-leader-def
    "om" 'mu4e)
  :custom
  (mail-user-agent 'mu4e-user-agent)
  (mu4e-drafts-folder "/[Gmail]/Drafts")
  (mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (mu4e-trash-folder  "/[Gmail]/Trash")
  (mu4e-refile-folder nil)
  ;; (mu4e-sent-messages-behavior 'delete)
  (mu4e-sent-messages-behavior 'sent)
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-maildir-shortcuts
   `( ("/INBOX"            . ?i)
      (,mu4e-drafts-folder . ?d)
      (,mu4e-sent-folder   . ?s)
      (,mu4e-trash-folder  . ?t)))
  (mu4e-compose-signature-auto-include nil)
  (mu4e-completing-read-function 'completing-read)
  (mu4e-use-fancy-chars nil)
  (mu4e-view-show-images t)
  (mu4e-view-show-addresses t)
  (mu4e-view-prefer-html t)
  (mu4e-change-filenames-when-moving t)
  (mu4e-attachment-dir "~/Downloads")
  :config
  (add-to-list 'mu4e-view-actions
               '("browser" . mu4e-action-view-in-browser))
  (add-to-list 'mu4e-view-actions
               '("xwidget" . mu4e-action-view-with-xwidget)))

(use-package message
  :ensure nil
  :custom
  (message-kill-buffer-on-exit t)
  (message-send-mail-function 'smtpmail-send-it))

(use-package smtpmail
  :ensure nil
  :custom
  (smtpmail-default-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-service 587)
  (smtpmail-debug-info t))
#+end_src

* Xwidget
#+begin_src emacs-lisp
(use-package xwidget
  :ensure nil
  :general
  (-leader-def
    "ow" 'xwidget-webkit-browse-url))

(use-package xwwp-follow-link-ivy
  :general
  (:keymaps 'xwidget-webkit-mode-map :states 'normal
    "f" 'xwwp-follow-link)
  :custom
  (xwwp-follow-link-completion-system 'ivy))
#+end_src

* Tools
** EditorConfig
#+begin_src emacs-lisp
(use-package editorconfig
  :hook
  (after-init-hook . editorconfig-mode))
#+end_src

** Docker
#+begin_src emacs-lisp
(use-package docker
  :general
  (-leader-def
    "od" 'docker))

(use-package docker-tramp)

(use-package dockerfile-mode
  :general
  (-local-leader-def :keymaps 'dockerfile-mode-map
    "b" 'dockerfile-build-buffer
    "B" 'dockerfile-build-no-cache-buffer))

(use-package docker-compose-mode
  :general
  (-local-leader-def :keymaps 'docker-compose-mode-map
    "." 'docker-compose))
#+end_src

** Kubernetes
#+begin_src emacs-lisp
(use-package kubernetes
  :general
  (-leader-def
    "ok" 'kubernetes-overview))

(use-package kubernetes-evil
  :init
  (with-eval-after-load 'kubernetes-overview
    (require 'kubernetes-evil)))
#+end_src
#+end_src

** Ansible
#+begin_src emacs-lisp
(use-package ansible-doc
  :general
  (-local-leader-def :keymaps 'yaml-mode-map
    "h" '(ansible-doc :wh "doc"))
  :hook
  (yaml-mode-hook . ansible-doc-mode)
  :config
  (evil-set-initial-state 'ansible-doc-module-mode 'motion))

(use-package jinja2-mode
  :mode "\\.j2\\'")

(use-package company-ansible
  :after company yaml-mode
  :init
  (add-to-list 'company-backends 'company-ansible))

(use-package ansible-vault-with-editor
  :ensure nil
  :quelpa
  (ansible-vault-with-editor
   :fetcher github
   :repo "rynffoll/ansible-vault-with-editor")
  :general
  (-local-leader-def :keymaps 'yaml-mode-map
    "e" '(ansible-vault-with-editor-edit :wk "edit")
    "E" '(ansible-vault-with-editor-encrypt :wk "encrypt")
    "D" '(ansible-vault-with-editor-decrypt :wk "decrypt")))
#+end_src

** HTTP
#+begin_src emacs-lisp
(use-package restclient
  :mode
  ("\\.http\\'" . restclient-mode))

(use-package company-restclient
  :after company restclient
  :init
  (add-to-list 'company-backends 'company-restclient))

(use-package ob-restclient
  :after org restclient)

(use-package restclient-test
  :hook
  (restclient-mode-hook . restclient-test-mode))
#+end_src

* Utils
#+begin_src emacs-lisp
(use-package password-generator
  :general
  (-leader-def
    "ip" '(:ignore t :wk "password-generator")
    "ips" 'password-generator-simple
    "ipS" 'password-generator-strong
    "ipp" 'password-generator-paranoid
    "ipn" 'password-generator-numeric
    "ipP" 'password-generator-phonetic))

(use-package google-translate
  :general
  (-leader-def
    "ht" 'google-translate-at-point
    "hT" 'google-translate-at-point-reverse)
  :custom
  (google-translate-default-target-language "ru")
  (google-translate-default-source-language "en")
  (google-translate-pop-up-buffer-set-focus t)
  (google-translate-backend-method 'curl))

(use-package olivetti
  :general
  (-leader-def
    "to" 'olivetti-mode)
  :custom
  (olivetti-body-width 100))

(use-package crux
  :general
  (-leader-def
    "fR" 'crux-rename-file-and-buffer
    "fD" 'crux-delete-file-and-buffer))

(use-package deadgrep
  :general
  (-leader-def
    "/D" 'deadgrep))

(use-package try
  :general
  (-leader-def
    "Pt" 'try))

(use-package string-inflection)
#+end_src

* The end
#+begin_src emacs-lisp :tangle no
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
;; End:
#+end_src

